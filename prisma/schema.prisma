generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  emailVerified     DateTime?
  image             String?
  company           String?
  phone             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  payments          Payment[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  role              Role      @default(USER)
  contracts         Contract[]        @relation("UserContracts")
  assignedContracts Contract[]        @relation("AssignedLawyer")
  notifications     Notification[]    @relation("UserNotifications")
  auditLogs         AuditLog[]        @relation("UserAuditLogs")
  conversionEvents  ConversionEvent[]
  userFunnel        UserFunnel?
  eventProperties   EventProperty[]
  emailSequences    EmailSequence[]
  abTestAssignments ABTestAssignment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Payment {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Contract {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation("UserContracts", fields: [userId], references: [id], onDelete: Cascade)
  fileName         String
  fileUrl          String
  status           ContractStatus @default(UPLOADED)
  riskLevel        RiskLevel?
  assignedLawyerId String?
  assignedLawyer   User?    @relation("AssignedLawyer", fields: [assignedLawyerId], references: [id])
  analysisResult   Json?
  uploadedAt       DateTime @default(now())
  completedAt      DateTime?
  updatedAt        DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  type        String
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  actionUrl   String?
  actionText  String?
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation("UserAuditLogs", fields: [userId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())
}

// Conversion tracking models
model ConversionEvent {
  id          String   @id @default(cuid())
  event       String
  properties  Json?
  timestamp   DateTime @default(now())
  userId      String?
  userEmail   String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userAgent   String?
  ipAddress   String?
  referrer    String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  createdAt   DateTime @default(now())
}

model UserFunnel {
  id                    String    @id @default(cuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  funnelStage           FunnelStage @default(VISITED)
  contractUploadedAt    DateTime?
  previewViewedAt       DateTime?
  paymentPageVisitedAt  DateTime?
  paymentInitiatedAt    DateTime?
  paymentCompletedAt    DateTime?
  isConverted           Boolean   @default(false)
  lastEmailOpenedAt     DateTime?
  lastEmailClickedAt    DateTime?
  emailOpenCount        Int       @default(0)
  emailClickCount       Int       @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model EventProperty {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  event       String
  properties  Json
  timestamp   DateTime @default(now())
}

// Email sequence models
model EmailSequence {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sequenceId  String   // e.g., 'contract_upload_sequence'
  status      EmailSequenceStatus @default(ACTIVE)
  currentStep Int      @default(0)
  totalSteps  Int
  startedAt   DateTime @default(now())
  completedAt DateTime?
  emails      EmailSequenceEmail[]
}

model EmailSequenceEmail {
  id              String   @id @default(cuid())
  sequenceId      String
  sequence        EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  templateName    String   // e.g., 'welcome', 'urgency'
  scheduledAt     DateTime
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  status          EmailStatus @default(SCHEDULED)
  subject         String?
  content         String?
  createdAt       DateTime @default(now())
}

// A/B testing models
model ABTest {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ABTestStatus @default(ACTIVE)
  startDate   DateTime @default(now())
  endDate     DateTime?
  variants    ABTestVariant[]
  assignments ABTestAssignment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ABTestVariant {
  id        String   @id @default(cuid())
  testId    String
  test      ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
  name      String
  weight    Float    // Percentage (0-100)
  isControl Boolean  @default(false)
  assignments ABTestAssignment[]
  createdAt DateTime @default(now())
}

model ABTestAssignment {
  id        String   @id @default(cuid())
  testId    String
  test      ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
  variantId String
  variant   ABTestVariant @relation(fields: [variantId], references: [id])
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userEmail String?
  assignedAt DateTime @default(now())
  conversions ABTestConversion[]
}

model ABTestConversion {
  id          String   @id @default(cuid())
  assignmentId String
  assignment   ABTestAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  conversionType String // e.g., 'click', 'purchase', 'signup'
  amount      Float?
  createdAt   DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum PlanType {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum ContractStatus {
  UPLOADED
  PROCESSING
  REVIEW
  COMPLETED
  FAILED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FunnelStage {
  VISITED
  UPLOADED
  PREVIEW_VIEWED
  PAYMENT_PAGE
  PAYMENT_INITIATED
  PAYMENT_COMPLETED
}

enum EmailSequenceStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum EmailStatus {
  SCHEDULED
  SENT
  OPENED
  CLICKED
  FAILED
}

enum ABTestStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
} 