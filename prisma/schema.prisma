generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  emailVerified     DateTime?
  image             String?
  company           String?
  phone             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  payments          Payment[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  role              Role      @default(USER)
  contracts         Contract[]        @relation("UserContracts")
  assignedContracts Contract[]        @relation("AssignedLawyer")
  notifications     Notification[]    @relation("UserNotifications")
  auditLogs         AuditLog[]        @relation("UserAuditLogs")
  conversionEvents  ConversionEvent[]
  userFunnel        UserFunnel?
  eventProperties   EventProperty[]
  emailSequences    EmailSequence[]
  
  // Collaboration relations
  comments          Comment[]
  collaborationSessionsStarted CollaborationSession[] @relation("SessionStartedBy")
  collaborationSessionParticipants CollaborationSessionParticipant[]
  approvalWorkflowSteps ApprovalWorkflowStep[]
  calendarEventsCreated CalendarEvent[] @relation("EventCreatedBy")
  eventParticipants EventParticipant[]
  integrationSettings IntegrationSettings?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Payment {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Contract {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation("UserContracts", fields: [userId], references: [id], onDelete: Cascade)
  fileName         String
  fileUrl          String
  status           ContractStatus @default(UPLOADED)
  riskLevel        RiskLevel?
  assignedLawyerId String?
  assignedLawyer   User?    @relation("AssignedLawyer", fields: [assignedLawyerId], references: [id])
  analysisResult   Json?
  uploadedAt       DateTime @default(now())
  completedAt      DateTime?
  updatedAt        DateTime @updatedAt
  
  // Collaboration relations
  comments         Comment[]
  calendarEvents   CalendarEvent[]
  approvalWorkflows ApprovalWorkflow[]
  collaborationSessions CollaborationSession[]
  documentSyncs    DocumentSync[]
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  type        String
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  actionUrl   String?
  actionText  String?
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation("UserAuditLogs", fields: [userId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())
}

// Conversion tracking models
model ConversionEvent {
  id          String   @id @default(cuid())
  event       String
  properties  Json?
  timestamp   DateTime @default(now())
  userId      String?
  userEmail   String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userAgent   String?
  ipAddress   String?
  referrer    String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  createdAt   DateTime @default(now())
}

model UserFunnel {
  id                    String    @id @default(cuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  funnelStage           FunnelStage @default(VISITED)
  contractUploadedAt    DateTime?
  previewViewedAt       DateTime?
  paymentPageVisitedAt  DateTime?
  paymentInitiatedAt    DateTime?
  paymentCompletedAt    DateTime?
  isConverted           Boolean   @default(false)
  lastEmailOpenedAt     DateTime?
  lastEmailClickedAt    DateTime?
  emailOpenCount        Int       @default(0)
  emailClickCount       Int       @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model EventProperty {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  event       String
  properties  Json
  timestamp   DateTime @default(now())
}

// Email sequence models
model EmailSequence {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sequenceId  String   // e.g., 'contract_upload_sequence'
  status      EmailSequenceStatus @default(ACTIVE)
  currentStep Int      @default(0)
  totalSteps  Int
  startedAt   DateTime @default(now())
  completedAt DateTime?
  emails      EmailSequenceEmail[]
}

model EmailSequenceEmail {
  id              String   @id @default(cuid())
  sequenceId      String
  sequence        EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  templateName    String   // e.g., 'welcome', 'urgency'
  scheduledAt     DateTime
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  status          EmailStatus @default(SCHEDULED)
  subject         String?
  content         String?
  createdAt       DateTime @default(now())
}

// Collaboration models
model Comment {
  id             String   @id @default(cuid())
  content        String
  clauseReference String?
  isPrivate      Boolean  @default(false)
  contractId     String
  contract       Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId       String?
  parent         Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies        Comment[] @relation("CommentReplies")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CollaborationSession {
  id           String   @id @default(cuid())
  contractId   String
  contract     Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  status       CollaborationSessionStatus @default(ACTIVE)
  startedBy    String
  startedByUser User    @relation("SessionStartedBy", fields: [startedBy], references: [id])
  participants CollaborationSessionParticipant[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CollaborationSessionParticipant {
  id        String @id @default(cuid())
  sessionId String
  session   CollaborationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  isActive  Boolean @default(true)

  @@unique([sessionId, userId])
}

model ApprovalWorkflow {
  id         String   @id @default(cuid())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  name       String
  status     ApprovalWorkflowStatus @default(IN_PROGRESS)
  steps      ApprovalWorkflowStep[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ApprovalWorkflowStep {
  id        String @id @default(cuid())
  workflowId String
  workflow  ApprovalWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  name      String
  order     Int
  assignedTo String
  assignedToUser User @relation(fields: [assignedTo], references: [id])
  status    ApprovalStepStatus @default(PENDING)
  comments  String?
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Integration models
model CalendarEvent {
  id               String   @id @default(cuid())
  title            String
  description      String?
  startDate        DateTime
  endDate          DateTime
  type             CalendarEventType @default(MEETING)
  contractId       String
  contract         Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  calendarProvider CalendarProvider @default(GOOGLE)
  externalEventId  String?
  isSynced         Boolean  @default(false)
  createdBy        String
  createdByUser    User     @relation("EventCreatedBy", fields: [createdBy], references: [id])
  participants     EventParticipant[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model EventParticipant {
  id      String @id @default(cuid())
  eventId String
  event   CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    EventParticipantRole @default(ATTENDEE)
  status  EventParticipantStatus @default(PENDING)

  @@unique([eventId, userId])
}

model IntegrationSettings {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Calendar integrations
  googleCalendarEnabled Boolean @default(false)
  googleCalendarToken   String?
  outlookCalendarEnabled Boolean @default(false)
  outlookCalendarToken   String?
  appleCalendarEnabled Boolean @default(false)
  
  // Email integrations
  gmailEnabled         Boolean @default(false)
  gmailToken           String?
  outlookEmailEnabled  Boolean @default(false)
  outlookEmailToken    String?
  customSmtpEnabled    Boolean @default(false)
  customSmtpHost       String?
  customSmtpPort       Int?
  customSmtpUsername   String?
  customSmtpPassword   String?
  
  // Storage integrations
  googleDriveEnabled   Boolean @default(false)
  googleDriveToken     String?
  dropboxEnabled       Boolean @default(false)
  dropboxToken         String?
  onedriveEnabled      Boolean @default(false)
  onedriveToken        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentSync {
  id         String @id @default(cuid())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  fileName   String
  fileType   String
  provider   StorageProvider
  externalFileId String?
  syncStatus SyncStatus @default(PENDING)
  lastSync   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum PlanType {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum ContractStatus {
  UPLOADED
  PROCESSING
  REVIEW
  COMPLETED
  FAILED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FunnelStage {
  VISITED
  UPLOADED
  PREVIEW_VIEWED
  PAYMENT_PAGE
  PAYMENT_INITIATED
  PAYMENT_COMPLETED
}

enum EmailSequenceStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum EmailStatus {
  SCHEDULED
  SENT
  OPENED
  CLICKED
  FAILED
}

// New enums for collaboration and integration
enum CollaborationSessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

enum ApprovalWorkflowStatus {
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum ApprovalStepStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
}

enum CalendarEventType {
  MEETING
  DEADLINE
  REMINDER
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  APPLE
}

enum EventParticipantRole {
  ORGANIZER
  ATTENDEE
  OPTIONAL
}

enum EventParticipantStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}

enum StorageProvider {
  GOOGLE_DRIVE
  DROPBOX
  ONEDRIVE
}

enum SyncStatus {
  PENDING
  SYNCED
  FAILED
} 